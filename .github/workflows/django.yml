name: Django CI

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-

    - name: Install Python dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements_v1.txt

    - name: Run migrations
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_S3_CUSTOM_DOMAIN: ${{ secrets.AWS_S3_CUSTOM_DOMAIN }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
        MESSAGE_API_KEY: ${{ secrets.MESSAGE_API_KEY }}
        MESSAGE_API_SECRET: ${{ secrets.MESSAGE_API_SECRET }}
        RIP_API_KEY: ${{ secrets.RIP_API_KEY }}
        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
        WEATHER_API_2: ${{ secrets.WEATHER_API_2 }}
      run: |
        source venv/bin/activate
        yes | python manage.py makemigrations --merge
        python manage.py migrate

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        HOST: ${{ secrets.HOST }}
        USER: ${{ secrets.USER }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_S3_CUSTOM_DOMAIN: ${{ secrets.AWS_S3_CUSTOM_DOMAIN }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
        MESSAGE_API_KEY: ${{ secrets.MESSAGE_API_KEY }}
        MESSAGE_API_SECRET: ${{ secrets.MESSAGE_API_SECRET }}
        RIP_API_KEY: ${{ secrets.RIP_API_KEY }}
        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
        WEATHER_API_2: ${{ secrets.WEATHER_API_2 }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa

        ssh -o StrictHostKeyChecking=no $USER@$HOST <<EOF
          cd /home/ubuntu/deploy/BeachSafety
          if [ ! -d "BeachSafety" ]; then
            git clone git@github.com:KTAIVLE27/BeachSafety.git
          else
            cd BeachSafety
            git pull origin main
          fi
          source /home/ubuntu/miniforge3/bin/activate mini7
          echo "DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY" > .env
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env
          echo "AWS_S3_CUSTOM_DOMAIN=$AWS_S3_CUSTOM_DOMAIN" >> .env
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME" >> .env
          echo "MESSAGE_API_KEY=$MESSAGE_API_KEY" >> .env
          echo "MESSAGE_API_SECRET=$MESSAGE_API_SECRET" >> .env
          echo "RIP_API_KEY=$RIP_API_KEY" >> .env
          echo "WEATHER_API_KEY=$WEATHER_API_KEY" >> .env
          echo "WEATHER_API_2=$WEATHER_API_2" >> .env
          pip install -r requirements_v1.txt
          yes | python manage.py makemigrations --merge
          python manage.py migrate
          
          sudo tee /etc/systemd/system/gunicorn.service > /dev/null <<EOL
          [Unit]
          Description=gunicorn daemon
          After=network.target

          [Service]
          User=ubuntu
          Group=www-data
          WorkingDirectory=/home/ubuntu/deploy/BeachSafety/BeachSafety
          ExecStart=/home/ubuntu/miniforge3/envs/mini7/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/deploy/BeachSafety/BeachSafety.sock BeachSafety.wsgi:application

          [Install]
          WantedBy=multi-user.target
          EOL

          sudo systemctl daemon-reload
          sudo systemctl start gunicorn
          sudo systemctl enable gunicorn
        EOF
