# Generated by Django 5.0.6 on 2024-07-20 13:59

import datetime
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Beach",
            fields=[
                ("beach_no", models.AutoField(primary_key=True, serialize=False)),
                ("beach_name", models.CharField(max_length=100)),
                ("beach_api_code", models.CharField(max_length=100, null=True)),
                ("beach_region", models.CharField(max_length=100)),
                ("beach_lat", models.FloatField()),
                ("beach_lon", models.FloatField()),
                ("beach_widget_id", models.CharField(max_length=50, null=True)),
                ("nx", models.IntegerField(null=True)),
                ("ny", models.IntegerField(null=True)),
                ("mae", models.FloatField(blank=True, null=True)),
                ("mse", models.FloatField(blank=True, null=True)),
                ("r2score", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "beach",
            },
        ),
        migrations.CreateModel(
            name="Chatlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question", models.TextField(verbose_name="Question")),
                ("answer", models.TextField(verbose_name="Answer")),
                (
                    "created_at",
                    models.DateTimeField(
                        default=datetime.datetime.now, verbose_name="Created At"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Database",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("division", models.TextField(verbose_name="division")),
                ("answer", models.TextField(verbose_name="answer")),
            ],
        ),
        migrations.CreateModel(
            name="FileUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="uploads/")),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                ("message_id", models.AutoField(primary_key=True, serialize=False)),
                ("message_code", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "message",
            },
        ),
        migrations.CreateModel(
            name="Scenario",
            fields=[
                ("scenario_id", models.AutoField(primary_key=True, serialize=False)),
                ("scenario_code", models.CharField(max_length=20)),
                ("scenario_time", models.DateTimeField()),
                ("scenario_situation", models.TextField()),
                ("scenario_process", models.TextField()),
                ("scenario_goals", models.TextField()),
                ("scenario_qa", models.TextField()),
            ],
            options={
                "db_table": "scenario",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("user_no", models.AutoField(primary_key=True, serialize=False)),
                (
                    "user_role",
                    models.CharField(
                        choices=[
                            ("police", "일반경찰"),
                            ("admin", "관리자"),
                            ("supervisor", "관제사"),
                        ],
                        default="police",
                        max_length=20,
                    ),
                ),
                ("user_phone", models.CharField(max_length=20)),
                ("user_name", models.CharField(max_length=100)),
                ("user_birth", models.DateField()),
                ("user_address", models.CharField(max_length=255)),
                ("user_detail_address", models.CharField(max_length=255)),
                ("user_id", models.CharField(max_length=50, unique=True)),
                ("user_email", models.EmailField(max_length=254, unique=True)),
                ("user_joinday", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "user",
            },
        ),
        migrations.CreateModel(
            name="CCTV",
            fields=[
                ("cctv_code", models.AutoField(primary_key=True, serialize=False)),
                ("cctv_location", models.CharField(max_length=255)),
                ("cctv_url", models.URLField(max_length=255)),
                (
                    "beach_no",
                    models.OneToOneField(
                        db_column="beach_no",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.beach",
                    ),
                ),
            ],
            options={
                "db_table": "cctv",
            },
        ),
        migrations.CreateModel(
            name="Event_board",
            fields=[
                ("event_id", models.AutoField(primary_key=True, serialize=False)),
                ("event_title", models.CharField(max_length=200)),
                ("event_img", models.CharField(blank=True, max_length=255, null=True)),
                ("event_views", models.IntegerField(default=0)),
                (
                    "event_wdate",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("event_contents", models.TextField(blank=True, null=True)),
                (
                    "beach_no",
                    models.ForeignKey(
                        blank=True,
                        db_column="beach_no",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="main.beach",
                    ),
                ),
                (
                    "user_no",
                    models.ForeignKey(
                        db_column="user_no",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "event_board",
            },
        ),
        migrations.CreateModel(
            name="Notice_board",
            fields=[
                ("notice_id", models.AutoField(primary_key=True, serialize=False)),
                ("notice_title", models.CharField(max_length=200)),
                ("notice_img", models.CharField(blank=True, max_length=255, null=True)),
                ("notice_views", models.IntegerField(default=0)),
                (
                    "notice_wdate",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("notice_contents", models.TextField(blank=True, null=True)),
                (
                    "beach_no",
                    models.ForeignKey(
                        blank=True,
                        db_column="beach_no",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="main.beach",
                    ),
                ),
                (
                    "user_no",
                    models.ForeignKey(
                        db_column="user_no",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "notice_board",
            },
        ),
    ]
